name: Playwright Tests

on:
  workflow_dispatch:
    inputs:
      rancher:
        # helm search repo rancher-latest --version '> 2.8.0-0 < 2.8.1-0'
        description: Rancher version
        type: choice
        default: 'released'
        options:
        - 'released'
        - '= 2.7.8'
        - '= 2.7.9'
        - '= 2.8.0'
        - '> 2.8.0-0'
      kubewarden:
        description: Kubewarden version
        type: choice
        default: 'rc'
        required: true
        options:
        - source
        - rc
        - released
      testsuite:
        description: Execute group of tests
        type: choice
        default: 'install + base tests'
        required: true
        options:
        - install
        - install + base tests
        - install + policy tests
        - install + all tests
      testfilter:
        description: Custom filter '\/[09]0' -g '00-|Privileged'
        type: string
      k3s:
        description: Kubernetes
        type: choice
        default: 'v1.26.10-k3s2'
        required: true
        options:
        - v1.25.15-k3s2
        - v1.26.10-k3s2
        - v1.27.7-k3s2
        - v1.28.3-k3s2

  pull_request:
    branches: main
    paths: pkg/kubewarden/**

  push:
    tags:
      - '*'

  schedule:
    - cron: "0 2 * * *"

env:
  # Github -> Secrets and variables -> Actions -> New repository variable
  RANCHER: ${{ vars.RANCHER || 'released' }}
  K3S_VERSION: ${{ inputs.k3s || 'v1.26.9-k3s1' }}
  K3D_CLUSTER_NAME: ${{ github.repository_owner }}-${{ github.event.repository.name }}-runner

jobs:
  e2e:
    # run schedule workflows only on original repo, not forks
    if: github.repository_owner == 'rancher' || github.event_name != 'schedule'
    runs-on: self-hosted
    steps:
    # ==================================================================================================
    # Check out code and install requirements
    # Use local kuberlr to avoid version skew
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install playwright
      working-directory: tests
      run: |
        yarn
        yarn playwright install chromium  # --with-deps not supported on opensuse


    # ==================================================================================================
    # Set up parameters and ENV
    - name: Setup global ENV
      run: |
        case ${{github.event_name}} in
          pull_request)
            KUBEWARDEN=source
            TESTSUITE='install + base'
            ;;
          schedule)
            KUBEWARDEN=released
            TESTSUITE='install + all'
            ;;
          workflow_dispatch)
            RANCHER="${{ inputs.rancher }}"
            KUBEWARDEN="${{ inputs.kubewarden }}"
            TESTSUITE="${{ inputs.testsuite }}"
            ;;
          push)
            KUBEWARDEN=rc
            TESTSUITE='install + all'
        esac

        echo "Event: ${{github.event_name}}"
        echo RANCHER="$RANCHER" | tee -a $GITHUB_ENV
        echo KUBEWARDEN="$KUBEWARDEN" | tee -a $GITHUB_ENV
        echo TESTSUITE="$TESTSUITE" | tee -a $GITHUB_ENV

    # ==================================================================================================
    # Create k3d cluster and install rancher
    - name: "Create kubernetes cluster"
      uses: AbsaOSS/k3d-action@v2.4.0
      with:
        cluster-name: ${{ env.K3D_CLUSTER_NAME }}
        args: "--agents 1 --image rancher/k3s:${{ env.K3S_VERSION }}"

    - name: Install Rancher
      run: |
        RANCHER_FQDN=$(k3d cluster list ${{ env.K3D_CLUSTER_NAME }} -o json | jq -r '[.[].nodes[] | select(.role == "server").IP.IP] | first').nip.io

        # Wait for kube-system
        for i in {1..20}; do
            output=$(kubectl get pods --no-headers -o wide -n kube-system | grep -vw Completed || echo 'Fail')
            grep -vE '([0-9]+)/\1 +Running' <<< $output || break
            [ $i -ne 20 ] && sleep 10 || { echo "Godot: pods not running"; exit 1; }
        done

        # Wait for cert-manager
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
        kubectl wait --for=condition=Available deployment --timeout=2m -n cert-manager --all

        # Translate to sematic version
        [ "$RANCHER" == "released" ] && RANCHER='*'

        # Rancher PSP is based on kubernetes version
        RANCHER_PSP=$(kubectl version -o json | jq -r '.serverVersion.minor <= "24"')

        helm repo add --force-update rancher-latest https://releases.rancher.com/server-charts/latest
        helm search repo rancher-latest/rancher ${RANCHER:+--version "$RANCHER"}
        helm upgrade --install rancher rancher-latest/rancher --wait \
            --namespace cattle-system --create-namespace \
            --set hostname=$RANCHER_FQDN \
            --set bootstrapPassword=sa \
            --set global.cattle.psp.enabled=$RANCHER_PSP \
            ${RANCHER:+--version "$RANCHER"}

        # Wait for rancher
        for i in {1..20}; do
            output=$(kubectl get pods --no-headers -o wide -n cattle-system -l app=rancher-webhook | grep -vw Completed || echo 'Wait: cattle-system')$'\n'
            output+=$(kubectl get pods --no-headers -o wide -n cattle-system | grep -vw Completed || echo 'Wait: cattle-system')$'\n'
            output+=$(kubectl get pods --no-headers -o wide -n cattle-fleet-system | grep -vw Completed || echo 'Wait: cattle-fleet-system')$'\n'
            grep -vE '([0-9]+)/\1 +Running|^$' <<< $output || break
            [ $i -ne 20 ] && sleep 30 || { echo "Godot: pods not running"; exit 1; }
        done

        echo "RANCHER_FQDN=$RANCHER_FQDN" | tee -a $GITHUB_ENV

    # ==================================================================================================
    # Setup playwright ENV and run tests
    # https://rancher.github.io/dashboard/testing/e2e-test#setup-for-local-tests
    - name: Build Kubewarden extension
      if: env.KUBEWARDEN == 'source'
      run: |
        yarn install --ignore-engines
        VERSION=0.0.1 yarn build-pkg kubewarden

    - name: Install & Execute tests
      timeout-minutes: 120
      working-directory: tests
      run: |
        # Translate TESTSUITE to FILTER
        # Regex matches names of test files
        case "$TESTSUITE" in
          "install")           TFILTER="\/00";;
          "install + base"*)   TFILTER="\/[0-8]";;
          "install + policy"*) TFILTER="\/[09]";;
          "install + all"*)    TFILTER="\/[0-9]";;
        esac

        # Custom filter to match file name or test
        [ -n "$TESTFILTER" ] && TFILTER="$TESTFILTER"

        # List tests and execute
        echo yarn playwright test ${TFILTER:-} -x
        yarn playwright test ${TFILTER:-} -x
      env:
        TESTFILTER: ${{inputs.testfilter}}
        RANCHER_URL: https://${{env.RANCHER_FQDN}}
        ORIGIN: ${{ env.KUBEWARDEN }}

    # ==================================================================================================
    # Artifacts & Summary
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: tests/playwright-report/
        retention-days: 15

    - name: Clean Up
      if: always()
      run: |
        k3d cluster delete ${{ env.K3D_CLUSTER_NAME }}
